{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tickets","setTickets","useState","users","setUsers","grouping","setGrouping","sorting","setSorting","selectedTickets","setSelectedTickets","useEffect","async","response","axios","get","data","error","console","fetchData","userMap","reduce","acc","user","id","name","priorityMap","4","3","2","1","0","groupedTickets","ticket","status","push","userId","priority","handleAddTicket","React","createElement","className","onChange","e","target","value","onClick","Object","entries","map","_ref","key","sort","a","b","title","localeCompare","sortTickets","type","checked","includes","ticketId","prevSelected","filter","handleCheckboxChange","tag","join","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5e763b5c.chunk.js","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// // export default App;\n// import React, { useState, useEffect } from 'react';\n// import Board from './components/Board';\n// import Controls from './components/Controls';\n// import './App.css';\n\n// const App = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sort, setSort] = useState('priority');\n\n//   useEffect(() => {\n//     fetch('https://api.quicksell.co/v1/internal/frontend-assignment')\n//       .then(response => response.json())\n//       .then(data => {\n//         setTickets(data.tickets);\n//         setUsers(data.users);\n//       });\n//   }, []);\n\n//   useEffect(() => {\n//     const savedGrouping = localStorage.getItem('grouping');\n//     const savedSort = localStorage.getItem('sort');\n//     if (savedGrouping) setGrouping(savedGrouping);\n//     if (savedSort) setSort(savedSort);\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem('grouping', grouping);\n//     localStorage.setItem('sort', sort);\n//   }, [grouping, sort]);\n\n//   return (\n//     <div className=\"App\">\n//       <Controls setGrouping={setGrouping} setSort={setSort} />\n//       <Board tickets={tickets} users={users} grouping={grouping} sort={sort} />\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n// // src/App.js\n// import React, { useEffect, useState } from 'react';\n// import './App.css';\n\n// const API_URL = 'https://api.quicksell.co/v1/internal/frontend-assignment';\n\n// const App = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [users, setUsers] = useState([]);\n\n//   // Fetch data from the API\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(API_URL);\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         const data = await response.json();\n//         setTickets(data.tickets); // Assuming the API response contains a \"tickets\" array\n//         setUsers(data.users); // Assuming the API response contains a \"users\" array\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   // Categorize tickets based on status\n//   const categorizeTickets = () => {\n//     const categories = {\n//       Backlog: [],\n//       'To Do': [],\n//       'In Progress': [],\n//       Done: [],\n//       Cancelled: []\n//     };\n\n//     tickets.forEach(ticket => {\n//       if (categories[ticket.status]) {\n//         categories[ticket.status].push(ticket);\n//       }\n//     });\n\n//     return categories;\n//   };\n\n//   // Render columns for each category\n//   const renderColumns = () => {\n//     const categorizedTickets = categorizeTickets();\n//     return Object.keys(categorizedTickets).map(category => (\n//       <div className=\"kanban-column\" key={category}>\n//         <h2>{category}</h2>\n//         {categorizedTickets[category].length > 0 ? (\n//           categorizedTickets[category].map((ticket) => (\n//             <div className=\"kanban-card\" key={ticket.id}>\n//               <h3>{ticket.title}</h3>\n//               <p>Status: {ticket.status}</p>\n//               <p>Priority: {getPriorityLabel(ticket.priority)}</p>\n//               <p>User: {getUserName(ticket.userId)}</p>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No tickets</p>\n//         )}\n//       </div>\n//     ));\n//   };\n\n//   // Get priority label based on the priority level\n//   const getPriorityLabel = (priority) => {\n//     switch(priority) {\n//       case 4: return 'Urgent';\n//       case 3: return 'High';\n//       case 2: return 'Medium';\n//       case 1: return 'Low';\n//       case 0: return 'No Priority';\n//       default: return 'Unknown';\n//     }\n//   };\n\n//   // Get user name based on userId\n//   const getUserName = (userId) => {\n//     const user = users.find(user => user.id === userId);\n//     return user ? user.name : 'Unknown User';\n//   };\n\n//   return (\n//     <div className=\"kanban-container\">\n//       <h1>Kanban Board</h1>\n//       <div className=\"kanban-board\">\n//         {renderColumns()}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'; // Create a CSS file for styling\n\n// const App = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sorting, setSorting] = useState('title');\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get('https://api.quicksell.co/v1/internal/frontend-assignment');\n//         setTickets(response.data.tickets);\n//       } catch (error) {\n//         console.error('Error fetching the data', error);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const groupTickets = () => {\n//     if (grouping === 'status') {\n//       return tickets.reduce((acc, ticket) => {\n//         acc[ticket.status] = acc[ticket.status] || [];\n//         acc[ticket.status].push(ticket);\n//         return acc;\n//       }, {});\n//     } else if (grouping === 'user') {\n//       return tickets.reduce((acc, ticket) => {\n//         const user = ticket.userId; // Assuming userId is the key to group by\n//         acc[user] = acc[user] || [];\n//         acc[user].push(ticket);\n//         return acc;\n//       }, {});\n//     } else if (grouping === 'priority') {\n//       return tickets.reduce((acc, ticket) => {\n//         const priority = ticket.priority; // Using priority for grouping\n//         acc[priority] = acc[priority] || [];\n//         acc[priority].push(ticket);\n//         return acc;\n//       }, {});\n//     }\n//     return {};\n//   };\n\n//   const sortTickets = (tickets) => {\n//     return tickets.sort((a, b) => {\n//       if (sorting === 'priority') {\n//         return b.priority - a.priority; // Descending order\n//       } else if (sorting === 'title') {\n//         return a.title.localeCompare(b.title); // Ascending order\n//       }\n//       return tickets;\n//     });\n//   };\n\n//   const groupedTickets = groupTickets();\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Kanban Board</h1>\n//       <div>\n//         <select onChange={(e) => setGrouping(e.target.value)}>\n//           <option value=\"status\">Group by Status</option>\n//           <option value=\"user\">Group by User</option>\n//           <option value=\"priority\">Group by Priority</option>\n//         </select>\n//         <select onChange={(e) => setSorting(e.target.value)}>\n//           <option value=\"title\">Sort by Title</option>\n//           <option value=\"priority\">Sort by Priority</option>\n//         </select>\n//         <button onClick={() => setTickets([...tickets])}>Display</button>\n//       </div>\n//       <div className=\"kanban\">\n//         {Object.entries(groupedTickets).map(([key, tickets]) => (\n//           <div key={key} className=\"column\">\n//             <h2>{key}</h2>\n//             {sortTickets(tickets).map(ticket => (\n//               <div key={ticket.id} className=\"card\">\n//                 <h3>{ticket.title}</h3>\n//                 <p>Priority: {ticket.priority}</p>\n//                 <p>Status: {ticket.status}</p>\n//                 <p>User: {ticket.userId}</p>\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './App.css'; // Import the updated CSS\n\n// const App = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sorting, setSorting] = useState('title');\n//   const [selectedTickets, setSelectedTickets] = useState([]); // State to store selected tickets\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get('https://api.quicksell.co/v1/internal/frontend-assignment');\n//         setTickets(response.data.tickets);\n//         setUsers(response.data.users);\n//       } catch (error) {\n//         console.error('Error fetching the data', error);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const handleCheckboxChange = (ticketId) => {\n//     // Toggle selection of the ticket\n//     setSelectedTickets((prevSelected) =>\n//       prevSelected.includes(ticketId)\n//         ? prevSelected.filter(id => id !== ticketId) // Remove from selection\n//         : [...prevSelected, ticketId] // Add to selection\n//     );\n//   };\n\n//   // Create a mapping of userId to user name\n//   const userMap = users.reduce((acc, user) => {\n//     acc[user.id] = user.name;\n//     return acc;\n//   }, {});\n\n//   const priorityMap = {\n//     4: 'Urgent',\n//     3: 'High',\n//     2: 'Medium',\n//     1: 'Low',\n//     0: 'No priority',\n//   };\n\n//   const groupTickets = () => {\n//     if (grouping === 'status') {\n//       return tickets.reduce((acc, ticket) => {\n//         acc[ticket.status] = acc[ticket.status] || [];\n//         acc[ticket.status].push(ticket);\n//         return acc;\n//       }, {});\n//     } else if (grouping === 'user') {\n//       return tickets.reduce((acc, ticket) => {\n//         const user = ticket.userId;\n//         acc[userMap[user]] = acc[userMap[user]] || [];\n//         acc[userMap[user]].push(ticket);\n//         return acc;\n//       }, {});\n//     } else if (grouping === 'priority') {\n//       return tickets.reduce((acc, ticket) => {\n//         const priority = ticket.priority;\n//         acc[priority] = acc[priority] || [];\n//         acc[priority].push(ticket);\n//         return acc;\n//       }, {});\n//     }\n//     return {};\n//   };\n\n//   const sortTickets = (tickets) => {\n//     return tickets.sort((a, b) => {\n//       if (sorting === 'priority') {\n//         return b.priority - a.priority;\n//       } else if (sorting === 'title') {\n//         return a.title.localeCompare(b.title);\n//       }\n//       return tickets;\n//     });\n//   };\n\n//   const groupedTickets = groupTickets();\n\n//   return (\n//     <div className=\"app\">\n//       <div>\n//         <select onChange={(e) => setGrouping(e.target.value)}>\n//           <option value=\"status\">Group by Status</option>\n//           <option value=\"user\">Group by User</option>\n//           <option value=\"priority\">Group by Priority</option>\n//         </select>\n//         <select onChange={(e) => setSorting(e.target.value)}>\n//           <option value=\"title\">Sort by Title</option>\n//           <option value=\"priority\">Sort by Priority</option>\n//         </select>\n//         <button onClick={() => setTickets([...tickets])}>Display</button>\n//       </div>\n//       <div className=\"kanban\">\n//         {Object.entries(groupedTickets).map(([key, tickets]) => (\n//           <div key={key} className=\"column\">\n//             <h2>\n//               {grouping === 'priority' ? priorityMap[key] : key}\n//             </h2>\n//             {sortTickets(tickets).map(ticket => (\n//               <div key={ticket.id} className=\"card\">\n//                 <input\n//                   type=\"checkbox\" // Use checkbox for multiple selection\n//                   checked={selectedTickets.includes(ticket.id)} // Check if this ticket is selected\n//                   onChange={() => handleCheckboxChange(ticket.id)} // Update the selection\n//                   className=\"custom-radio\" // Custom class for styling\n//                 />\n//                 {/* <h3>Ticket #{ticket.id}</h3> */}\n//                 <h2>{ticket.title}</h2>\n//                 <p>{ticket.tag.join(', ')}</p>\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Import the updated CSS\n\nconst App = () => {\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [grouping, setGrouping] = useState('status');\n  const [sorting, setSorting] = useState('title');\n  const [selectedTickets, setSelectedTickets] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('https://api.quicksell.co/v1/internal/frontend-assignment');\n        setTickets(response.data.tickets);\n        setUsers(response.data.users);\n      } catch (error) {\n        console.error('Error fetching the data', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const handleCheckboxChange = (ticketId) => {\n    setSelectedTickets((prevSelected) =>\n      prevSelected.includes(ticketId)\n        ? prevSelected.filter(id => id !== ticketId)\n        : [...prevSelected, ticketId]\n    );\n  };\n\n  const userMap = users.reduce((acc, user) => {\n    acc[user.id] = user.name;\n    return acc;\n  }, {});\n\n  const priorityMap = {\n    4: 'Urgent',\n    3: 'High',\n    2: 'Medium',\n    1: 'Low',\n    0: 'No priority',\n  };\n\n  const groupTickets = () => {\n    if (grouping === 'status') {\n      return tickets.reduce((acc, ticket) => {\n        acc[ticket.status] = acc[ticket.status] || [];\n        acc[ticket.status].push(ticket);\n        return acc;\n      }, {});\n    } else if (grouping === 'user') {\n      return tickets.reduce((acc, ticket) => {\n        const user = ticket.userId;\n        acc[userMap[user]] = acc[userMap[user]] || [];\n        acc[userMap[user]].push(ticket);\n        return acc;\n      }, {});\n    } else if (grouping === 'priority') {\n      return tickets.reduce((acc, ticket) => {\n        const priority = ticket.priority;\n        acc[priority] = acc[priority] || [];\n        acc[priority].push(ticket);\n        return acc;\n      }, {});\n    }\n    return {};\n  };\n\n  const sortTickets = (tickets) => {\n    return tickets.sort((a, b) => {\n      if (sorting === 'priority') {\n        return b.priority - a.priority;\n      } else if (sorting === 'title') {\n        return a.title.localeCompare(b.title);\n      }\n      return tickets;\n    });\n  };\n\n  const groupedTickets = groupTickets();\n\n  const handleAddTicket = () => {\n    // Do nothing on click\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"controls\">\n        <select onChange={(e) => setGrouping(e.target.value)}>\n          <option value=\"status\">Group by Status</option>\n          <option value=\"user\">Group by User</option>\n          <option value=\"priority\">Group by Priority</option>\n        </select>\n        <select onChange={(e) => setSorting(e.target.value)}>\n          <option value=\"title\">Sort by Title</option>\n          <option value=\"priority\">Sort by Priority</option>\n        </select>\n        <button onClick={() => setTickets([...tickets])}>Display</button>\n      </div>\n      <div className=\"kanban\">\n        {Object.entries(groupedTickets).map(([key, tickets]) => (\n          <div key={key} className=\"column\">\n            <h2 className=\"column-header\">\n              <span>\n                {grouping === 'priority' ? priorityMap[key] : key}\n                {grouping === 'status' && <i className=\"fas fa-clipboard-list status-icon\"></i>}\n              </span>\n              <button className=\"add-button\" onClick={handleAddTicket}>+</button>\n            </h2>\n            {sortTickets(tickets).map(ticket => (\n              <div key={ticket.id} className=\"card\">\n                <div className=\"card-content\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedTickets.includes(ticket.id)}\n                    onChange={() => handleCheckboxChange(ticket.id)}\n                    className=\"custom-radio\"\n                  />\n                  <h2 className=\"ticket-title\">{ticket.title}</h2>\n                </div>\n                <p className=\"ticket-tags\">{ticket.tag.join(', ')}</p>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}